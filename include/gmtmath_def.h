/*--------------------------------------------------------------------
 *
 *   The GMT-system:	gmtmath_def.h [Generated by make_gmtmath.x]
 *
 *	Copyright (c) 1991-1999 by P. Wessel and W. H. F. Smith
 *	See COPYING file for copying and redistribution conditions.
 *
 *	This program is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; version 2 of the License.
 *
 *	This program is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	Contact info: www.soest.hawaii.edu/gmt
 *--------------------------------------------------------------------*/
/*	gmtmath_def.h is automatically generated by make_gmtmath.x;
 *	Do NOT edit manually!
 *
 * For backward compatibility:
 */

#define ADD	3
#define DIV	19
#define MUL	49
#define RAISE	54	/* (POW) */
#define SUB	65

/* Declare all functions to return int */

void table_ABS(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 00 */
void table_ACOS(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 01 */
void table_ACOSH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 02 */
void table_ADD(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 03 */
void table_AND(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 04 */
void table_ASIN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 05 */
void table_ASINH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 06 */
void table_ATAN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 07 */
void table_ATAN2(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 08 */
void table_ATANH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 09 */
void table_BEI(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 10 */
void table_BER(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 11 */
void table_CEIL(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 12 */
void table_COS(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 13 */
void table_COSD(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 14 */
void table_COSH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 15 */
void table_D2DT2(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 16 */
void table_D2R(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 17 */
void table_DILOG(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 18 */
void table_DIV(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 19 */
void table_DDT(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 20 */
void table_DUP(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 21 */
void table_EXCH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 22 */
void table_EXP(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 23 */
void table_ERF(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 24 */
void table_ERFC(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 25 */
void table_ERFINV(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 26 */
void table_FLOOR(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 27 */
void table_FMOD(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 28 */
void table_HYPOT(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 29 */
void table_I0(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 30 */
void table_I1(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 31 */
void table_IN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 32 */
void table_INV(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 33 */
void table_J0(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 34 */
void table_J1(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 35 */
void table_JN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 36 */
void table_K0(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 37 */
void table_K1(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 38 */
void table_KN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 39 */
void table_KEI(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 40 */
void table_KER(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 41 */
void table_LOG(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 42 */
void table_LOG10(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 43 */
void table_LOG1P(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 44 */
void table_MAX(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 45 */
void table_MEAN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 46 */
void table_MED(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 47 */
void table_MIN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 48 */
void table_MUL(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 49 */
void table_NEG(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 50 */
void table_OR(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 51 */
void table_PLM(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 52 */
void table_POP(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 53 */
void table_POW(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 54 */
void table_R2(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 55 */
void table_R2D(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 56 */
void table_RINT(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 57 */
void table_SIGN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 58 */
void table_SIN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 59 */
void table_SIND(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 60 */
void table_SINH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 61 */
void table_SQRT(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 62 */
void table_STD(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 63 */
void table_STEP(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 64 */
void table_SUB(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 65 */
void table_TAN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 66 */
void table_TAND(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 67 */
void table_TANH(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 68 */
void table_Y0(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 69 */
void table_Y1(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 70 */
void table_YN(double **stack[], BOOLEAN *constant, double *factor, int last, int start, int n);		/* id = 71 */

/* Declare operator array */

char *operator[N_OPERATORS] = {
	"ABS",		/* id = 00 */
	"ACOS",		/* id = 01 */
	"ACOSH",		/* id = 02 */
	"ADD",		/* id = 03 */
	"AND",		/* id = 04 */
	"ASIN",		/* id = 05 */
	"ASINH",		/* id = 06 */
	"ATAN",		/* id = 07 */
	"ATAN2",		/* id = 08 */
	"ATANH",		/* id = 09 */
	"BEI",		/* id = 10 */
	"BER",		/* id = 11 */
	"CEIL",		/* id = 12 */
	"COS",		/* id = 13 */
	"COSD",		/* id = 14 */
	"COSH",		/* id = 15 */
	"D2DT2",		/* id = 16 */
	"D2R",		/* id = 17 */
	"DILOG",		/* id = 18 */
	"DIV",		/* id = 19 */
	"DDT",		/* id = 20 */
	"DUP",		/* id = 21 */
	"EXCH",		/* id = 22 */
	"EXP",		/* id = 23 */
	"ERF",		/* id = 24 */
	"ERFC",		/* id = 25 */
	"ERFINV",		/* id = 26 */
	"FLOOR",		/* id = 27 */
	"FMOD",		/* id = 28 */
	"HYPOT",		/* id = 29 */
	"I0",		/* id = 30 */
	"I1",		/* id = 31 */
	"IN",		/* id = 32 */
	"INV",		/* id = 33 */
	"J0",		/* id = 34 */
	"J1",		/* id = 35 */
	"JN",		/* id = 36 */
	"K0",		/* id = 37 */
	"K1",		/* id = 38 */
	"KN",		/* id = 39 */
	"KEI",		/* id = 40 */
	"KER",		/* id = 41 */
	"LOG",		/* id = 42 */
	"LOG10",		/* id = 43 */
	"LOG1P",		/* id = 44 */
	"MAX",		/* id = 45 */
	"MEAN",		/* id = 46 */
	"MED",		/* id = 47 */
	"MIN",		/* id = 48 */
	"MUL",		/* id = 49 */
	"NEG",		/* id = 50 */
	"OR",		/* id = 51 */
	"PLM",		/* id = 52 */
	"POP",		/* id = 53 */
	"POW",		/* id = 54 */
	"R2",		/* id = 55 */
	"R2D",		/* id = 56 */
	"RINT",		/* id = 57 */
	"SIGN",		/* id = 58 */
	"SIN",		/* id = 59 */
	"SIND",		/* id = 60 */
	"SINH",		/* id = 61 */
	"SQRT",		/* id = 62 */
	"STD",		/* id = 63 */
	"STEP",		/* id = 64 */
	"SUB",		/* id = 65 */
	"TAN",		/* id = 66 */
	"TAND",		/* id = 67 */
	"TANH",		/* id = 68 */
	"Y0",		/* id = 69 */
	"Y1",		/* id = 70 */
	"YN"		/* id = 71 */
};

